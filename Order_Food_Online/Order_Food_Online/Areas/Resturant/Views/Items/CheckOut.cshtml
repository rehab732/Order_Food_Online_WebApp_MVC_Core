@model IEnumerable<Order_Food_Online.Areas.Resturant.Models.Items>

@{
    ViewData["Title"] = "CheckOut";
    Dictionary<int, int> items = ViewBag.Items;
    Decimal TotalPrice = 0;
    var RestaurantId = ViewBag.RestaurantId;

    var placeName = "test";


}

<style>
    #linkmap{
        pointer-events: none;
    }
</style>


<h1>CheckOut</h1>

<table class="table">
    <thead>
        <tr>
            <th>
                ItemName
            </th>
            <th>
                Price
            </th>
            <th>
                Total Amount
            </th>
             <th>
                Quantity
            </th>
        </tr>
    </thead>
    <tbody>

        @foreach (var item in items)
        {

            var itemItself = Model.Where(e => e.ItemsId == item.Key).First();
            var itemName = itemItself.ItemName;
            var itemPrice = itemItself.Price;



            <tr>
                <td>
                    @itemName
                </td>
                <td>
                    @itemPrice 
                </td>
                <td>
                    @(itemPrice * item.Value)
                </td>
                 <td>
                    @item.Value
                 </td>
                 
                @{
                    TotalPrice += (itemPrice * item.Value);
                }

                </tr>
        }
    </tbody>
</table>
<div style="margin:auto;text-align:center;">
<p style="font-weight:bold; font-size:30px;">Total Price @TotalPrice</p>

<a id = "linkmap" style=" width:200px; background-color: red;color: white; border: 2px solid white;padding: 20px 20px;text-align: center;text-decoration: none;display: inline-block;" href="https://localhost:44385/Resturant/Items/ConfirmOrder?TotalPrice=@TotalPrice&RestaurantId=@RestaurantId">Confirm  Order</a> 
    <a  style=" width:200px; background-color: red;color: white; border: 2px solid white;padding: 20px 20px;text-align: center;text-decoration: none;display: inline-block;" href="https://localhost:44385/Home">Cancel Order</a>  

</div>

@*<button id="show-map-btn">Show Map</button>
*@
    <div>
    <input  id="search" type="text" placeholder="Search for location">
    </div>
<div id="map" style="width: 100%; height: 400px;"></div>
<script>


    //document.getElementById('show-map-btn').addEventListener('click', function () {
    //    // Show the map container
    //    document.getElementById('map').style.display = 'block';
    //    document.getElementById('search').style.display = 'block';


    //    // Initialize the map
    //    initMap();
    //});


    function initMap() {
        // Create a new map object
        var map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 30.044420, lng: 31.235712 },
            zoom: 8
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('search');
        var searchBox = new google.maps.places.SearchBox(input);

          var selectedPlaceLink = document.getElementById('linkmap');


        // Bias the search results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox.setBounds(map.getBounds());
        });

        var markers = [];

        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function () {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }
            var place = places[0];
            placeName = place.name;

            console.log(typeof(placeName));

            if(placeName.length > 0){
            console.log(placeName.length);
            //.style['pointer-events'] = 'auto';
            selectedPlaceLink.style['pointer-events'] = 'auto';

            }

            // Do something with the selected place (e.g. display its name)
            console.log(placeName);



            selectedPlaceLink.href = 'https://localhost:44385/Resturant/Items/ConfirmOrder?TotalPrice=@TotalPrice&RestaurantId=@RestaurantId&Location=' + encodeURIComponent(place.name);
            // Clear out the old markers.
            markers.forEach(function (marker) {
                marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function (place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }

                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.
                markers.push(new google.maps.Marker({
                    map: map,
                    icon: icon,
                    title: place.name,
                    position: place.geometry.location
                }));

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });
    }

    window.addEventListener('load', function () {
        initMap();
    });
</script>

    @*<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCwPu6REj5eyipioZ1BumzrCNnFLmKsqJg"></script>*@
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCwPu6REj5eyipioZ1BumzrCNnFLmKsqJg&libraries=places"></script>

    @*            int https://localhost:44385/Resturant/Orders/ConfirmOrder?TotalPrice=480.00&RestoID=RestoID
*@